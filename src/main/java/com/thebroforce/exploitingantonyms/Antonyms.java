/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thebroforce.exploitingantonyms;

import edu.smu.tspell.wordnet.*;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.apache.commons.io.FilenameUtils;
import org.json.simple.parser.ParseException;

/**
 *
 * @author redho
 */
public class Antonyms {
    /**
     * 
     * @param word word for which to find antonyms
     * @return String array of antonyms to word,
     * null if none are found
     */
    public static String[] getAntonyms(String word, String wordnetDictPath) {
        
        //  Deprecated
        /*
        String propertiesStr = "serverProperties.properties";
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        
        Properties props = new Properties();
        InputStream is = null;
        
        try (InputStream resourceStream = loader.getResourceAsStream(propertiesStr)){
            //  load properties
            props.load(resourceStream);
        } catch (IOException e) {
            System.err.println(e);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        */
        
        //  System.setProperty("wordnet.database.dir", props.getProperty("wordnetDict"));
        
        System.setProperty("wordnet.database.dir", wordnetDictPath);
        
        //  Get the synsets containing the wrod form
        WordNetDatabase database = WordNetDatabase.getFileInstance();
        Synset[] synsets = database.getSynsets(word);
        
        Set<String> list = new HashSet<>();
        
        // Get antonyms
        for(Synset synset : synsets){
            WordSense[] wordsenses = synset.getAntonyms(word);
            for(WordSense wordsense : wordsenses) {
                for(String str : wordsense.getSynset().getWordForms()) {
                    list.add(str);
                }
            }
        }
        
        if(list.isEmpty()) return null;
        
        return list.toArray(new String[list.size()]);
    }
    
    public static void main(String[] args) {
        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(new FileReader("src/webCrawler/dlAllqueriesConf.json"));
            JSONObject jsonObject = (JSONObject)obj;
            String basePath = (String) jsonObject.get("path2folder");
            System.out.println(basePath);
            System.out.println(FilenameUtils.removeExtension((new File("D:\\Lucene\\files2beIndexed\\Correct+dosage+of+ibuprofen22.txt")).getName()));
        } catch (IOException | ParseException e) {
            System.err.println(e);
        }
    }
}
