package com.thebroforce.exploitingantonyms;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import net.sf.extjwnl.JWNLException;
import net.sf.extjwnl.data.IndexWord;
import net.sf.extjwnl.data.IndexWordSet;
import net.sf.extjwnl.data.POS;
import net.sf.extjwnl.data.PointerUtils;
import net.sf.extjwnl.data.Synset;
import net.sf.extjwnl.data.list.PointerTargetNode;
import net.sf.extjwnl.data.list.PointerTargetNodeList;
import net.sf.extjwnl.dictionary.Dictionary;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author redho
 */
public class AntonymsExtJWNL {

    /**
     *
     * @param sentence for which we need dual antonyms for
     * @return a hashmap where term:[antonyms]
     * @throws JWNLException
     */
    public static HashMap main(String sentence) throws JWNLException {
        HashMap antonymsHashMap = new HashMap();
        for (String lemma : sentence.split(" ")) {
            antonymsHashMap.put(lemma, getAntonyms(lemma));
        }
        return antonymsHashMap;
    }

    public static Set<String> getAntonyms(String str) throws JWNLException {
        Set<String> antonyms = new HashSet<>(); // holds the antonyms

        // Get default dictionary
        Dictionary dictionary = Dictionary.getDefaultResourceInstance();
        
        // Get index word set for str  
        IndexWordSet wordSet = dictionary.lookupAllIndexWords(str);

        // Add antonyms for ADJECTIVE POS
        IndexWord word = wordSet.getIndexWord(POS.ADJECTIVE);
        addAntonyms(antonyms, word);
        // Add antonyms for NOUN POS
        word = wordSet.getIndexWord(POS.NOUN);
        addAntonyms(antonyms, word);
        // Add antonyms for VERB POS
        word = wordSet.getIndexWord(POS.VERB);
        addAntonyms(antonyms, word);
        // Add antonyms for ADVERB POS
        word = wordSet.getIndexWord(POS.ADVERB);
        addAntonyms(antonyms, word);

        return antonyms;

    }

    public static Set<String> addAntonyms(Set<String> antonyms, IndexWord word) throws JWNLException {

        // If POS is not valid it might lead to null
        if (word == null) {
            return antonyms;
        }

        System.out.println("Checking for POS" + word.getPOS());

        for (Synset sense : word.getSenses()) {
            System.out.println("Synset: " + sense.toString());
            PointerTargetNodeList normAnts = PointerUtils.getAntonyms(sense);

            for (PointerTargetNode normAnt : normAnts) {
                String lemma = normAnt.getWord().getLemma();
                System.out.println("Antonym: " + lemma);
                antonyms.add(lemma);
            }
        }

        return antonyms;

    }

}
