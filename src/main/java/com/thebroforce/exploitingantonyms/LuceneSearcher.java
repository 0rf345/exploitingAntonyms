/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thebroforce.exploitingantonyms;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import java.util.Arrays;
import javax.servlet.ServletContext;
import org.apache.commons.io.FilenameUtils;

/**
 * query: Query to be searched against our collection
 * Returns most relevant results
 * @author Orfeas Kalipolitis, based on Lucene demo SearchFiles file
 */
public class LuceneSearcher {
    
    private LuceneSearcher() {}
    
    public static String main(String queryIn, int numOfResRequested, String path2config, String path2files2hrefs) throws Exception{
    
        JSONParser jsonParser = new JSONParser();
        String index = null;
        String downloadFolder = null;
        JSONObject whereToFindTheFiles = null;
        try {
            Object obj = jsonParser.parse(new FileReader(path2config));
            JSONObject jsonObject = (JSONObject)obj;
            whereToFindTheFiles = (JSONObject)jsonParser.parse(
                new FileReader(path2files2hrefs)
            );
            downloadFolder = (String) jsonObject.get("path2folder");
            index = (String) jsonObject.get("indexFolder");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        if (index == null || downloadFolder == null || whereToFindTheFiles == null) {
            System.err.println("Was unable to read configuration file");
            System.err.println("index: " + index + " dl: " + downloadFolder + "where: " + whereToFindTheFiles);
            return null;
        }
        
        String resultsString = "";
        
        String field = "contents";
        String queryString = queryIn;
        String queries = null;      // file of all queries to be tested
        int repeat = 0;             // repeat for benchmarking reasons
        boolean raw = false;
        int hitsPerPage = numOfResRequested;   // was 10 by default
        
        IndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(index)));
        IndexSearcher searcher = new IndexSearcher(reader);
        Analyzer analyzer = new StandardAnalyzer();
        
        BufferedReader in = null;
        if (queries != null) {
            in = Files.newBufferedReader(Paths.get(queries), StandardCharsets.UTF_8);
        } else {
            in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
        }
        QueryParser parser = new QueryParser(field, analyzer);
        
        String line = queryString != null ? queryString : in.readLine();
        
        if (line == null || line.length() == -1) {
            System.err.println("Query was not read correctly");
            return null;
        }
        
        line = line.trim();
        if (line.length() == 0) {
            System.err.println("Line length was 0");
            return null;
        }
        
        Query query = parser.parse(line);
        System.out.println("Searching for: " + query.toString(field));
        
        if (repeat > 0) {                           // repeat & time as benchmark
            Date start = new Date();
            for (int i = 0; i < repeat; i++) {
                searcher.search(query, 100);
            }
            Date end = new Date();
            System.out.println("Time: "+(end.getTime()-start.getTime())+"ms");
        }
        
        resultsString = doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null, whereToFindTheFiles, downloadFolder);
        
        if (queryString != null) {
            System.err.println("Query string was not null after search");
            // Testing
            return resultsString;
            //return null;
        }
        
        reader.close();
        return resultsString;
    }
    
    /**
     * This demonstrates a typical paging search scenario, where the search engine presents
     * pages of size n to the user. The user can then go to the next page if interested in
     * the next hits.
     * 
     * When the query is executed for the first time, then only enough results are collected
     * to fill 5 result pages. If the user wants to page beyond this limit, then the query
     * is executed another time and all hits are collected.
     */
    public static String doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query,
            int hitsPerPage, boolean raw, boolean interactive, 
            JSONObject files2hrefs, String downloadFolder) throws IOException {
        
        String resultsString = "[";
        
        // Collect enough docs to show 5 pages, tweak for more or less results accordingly
        // TopDocs results = searcher.search(query, 5 * hitsPerPage);
        TopDocs results = searcher.search(query, hitsPerPage);
        ScoreDoc[] hits = results.scoreDocs;
        
        int numTotalHits = Math.toIntExact(results.totalHits);
        System.out.println(numTotalHits + " total matching documents");
        
        int start = 0;
        int end = Math.min(numTotalHits, hitsPerPage);
        
        while (true) {
            
            if (end > hits.length) {
                System.out.println("Only results 1 - " + hits.length +" of " + numTotalHits + " total matching documents collected.");
                System.out.println("Collect more (y/n) ?");
                String line = in.readLine();
                if (line.length() == 0 || line.charAt(0) == 'n') {
                    break;
                }
                hits = searcher.search(query, numTotalHits).scoreDocs;
            }
            
            end = Math.min(hits.length, start + hitsPerPage);
            
            for (int i = start; i < end; i++) {
                
                if (raw) {                              // output raw format
                    // System.out.println("doc="+hits[i].doc+" score="+hits[i].score);
                    continue;
                }

                Document doc = searcher.doc(hits[i].doc);
                String path = doc.get("path");
                if (path != null) {
                    System.out.println((i+1) + ". " + path);
                    
                    String comma = ",";
                    if(i + 1 == end) comma = "";
                    
                    String fileName = downloadFolder + "/" + 
                        FilenameUtils.removeExtension(new File(path).getName());
                    resultsString = resultsString
                        .concat("\n\t{\n")
                            .concat("\t\t\"name\": \"".concat(fileName).concat("\",\n"))
                            .concat("\t\t\"score\": " + hits[i].score + ",\n")
                            .concat("\t\t\"href\": \"" +
                                (String)(
                                    ((JSONObject)files2hrefs.get(fileName))
                                    .get("href")
                                ) +
                                "\"\n"
                            )
                        .concat("\t}"+ comma + "\n")
                    ;
                    
                    String title = doc.get("title");
                    if (title != null) {
                        System.out.println("   Title: " + doc.get("title"));
                        //resultsString += "File: " + doc.get("Title") + " score=" + hits[i].score;
                    }
                } else {
                    System.out.println((i+1) + ". " + "No path for this document");
                }

            }
            
            if (!interactive || end == 0) {
                break;
            }
            
            if (numTotalHits >= end) {
                
                // TODO: Handle it
            }
            
        }
        resultsString = resultsString.concat("]");
        return resultsString;
    }
}
