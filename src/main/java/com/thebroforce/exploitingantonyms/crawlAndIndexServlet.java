/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thebroforce.exploitingantonyms;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author redho
 */
@WebServlet(name = "crawlAndIndexServlet", urlPatterns = {"/crawlAndIndexServlet"})
public class crawlAndIndexServlet extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     * @throws org.json.simple.parser.ParseException
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, ParseException, InterruptedException {
        response.setContentType("text/html;charset=UTF-8");
        
        System.err.println("In new servlet");
        JSONObject params = (JSONObject) new JSONParser().parse(request.getParameter("parameters"));
        
        //  String windowsPrefix = SystemUtils.IS_OS_WINDOWS ? "C:\\Windows\\System32\\cmd.exe /c " : "";
        
        //  String command = "C:\\Python36\\python.exe " + params.get("path") + "\\test.py";
        //  String command = "python " + params.get("path") + "/test.py";
        //  String command = windowsPrefix + "python " + params.get("path") + "\\test.py";
        //  String command = windowsPrefix + "mkdir " + params.get("path") + "\\" + params.get("id");
        
        String newPath = ((String)params.get("path")).replace('\\', '/') + "/" + params.get("id") + "/";
        
        //  Get searchCrawler script absolute path
        String pythonScript = getServletContext().getRealPath("/WEB-INF/searchCrawler.py");
        
        if(pythonScript == null) {
            System.err.println("Could not find crawler script");
            return;
        }
        
        //  Create experiment folder
        File f = new File(newPath);
        
        if(f.exists()) {
            System.err.println("Folder: " + newPath + " already exists");
            return;
        }
        
        if(!f.mkdir()) {
            System.err.println("Could not create folder: " + newPath);
            return;
        } else {
            System.out.println("Folder created successfully");
        }
        
        //  Create queries file
        try (PrintWriter queriesWriter = new PrintWriter(newPath + "queries.csv")) {
            JSONArray queries = (JSONArray)params.get("queries");
            for (int i = 0; i < queries.size(); i++) {
                queriesWriter.println(queries.get(i));
            }
        }
        
        // Acceptable extensions        
        JSONArray extensions = new JSONArray();
        extensions.add(".html");
        extensions.add(".htm");
        extensions.add(".doc");
        extensions.add(".docx");
        extensions.add(".pdf");
        extensions.add(".ppt");
        extensions.add(".txt");
        extensions.add("");
        
        //  Create conf file for crawler
        JSONObject confObject = new JSONObject();
        confObject.put("extensions", extensions);
        confObject.put("path2folder", newPath + "DLed_webpages");
        confObject.put("numOfResPerQuery", Integer.parseInt((String)(params.get("resPerQuery"))));
        confObject.put("minFileSize", 1024);
        confObject.put("maxFileSize", 10 * 1024 * 1024);
        confObject.put("chunkSize", 10 * 1024);
        confObject.put("resultsLedger", newPath + "resultsLedger.csv");
        confObject.put("pageDict", newPath + "pageDict.json");
        confObject.put("filesDownloaded", newPath + "filesDownloadedAndWhereToFindThem.json");
        confObject.put("waitTime", 2 * 60);
        confObject.put("debugOutput", true);
        confObject.put("queriesCSVfile", newPath + "queries.csv");
        
        try (PrintWriter confWriter = new PrintWriter(newPath + "conf.json", "UTF-8")) {
            confWriter.write(confObject.toJSONString());
        }
        
        
        String command = "python " + pythonScript + " " + newPath + "conf.json";
        
        System.err.println(command);
        
        Process p = Runtime.getRuntime().exec(command);
        
        System.err.println("When did I print?");
        
        //  Write output to file
        try (PrintWriter outputWriter = new PrintWriter(newPath + "output.txt", "UTF-8")) {
            String s;
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while((s = stdInput.readLine())!=null){
                outputWriter.println(s);
                System.err.println(s);
            }
        }
        
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            System.err.println(e);
        }
        
        // Do stuff after I'm done with crawling
        
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet crawlAndIndexServlet</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet crawlAndIndexServlet at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            processRequest(request, response);
        } catch (ParseException | InterruptedException ex) {
            Logger.getLogger(crawlAndIndexServlet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            processRequest(request, response);
        } catch (ParseException | InterruptedException ex) {
            Logger.getLogger(crawlAndIndexServlet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
