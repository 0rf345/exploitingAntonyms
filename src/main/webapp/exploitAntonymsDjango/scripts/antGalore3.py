import nltk
from nltk.corpus import wordnet as wn

# text = input('Input a sentence: ')
'''
	Tips
	Format
	wn.synsets('word')
	wn.synsets('word; wn.POS')

	This script takes a sentence, POS tags it and then prints antonyms
	for each word in it (provided the word has some)
'''


'''
	In: a space separated normal text query
	Out: a JSON like object with the words of the query as keys
	     and the antonyms of each as values 
'''
def ants(text):
	antonyms = []
	queryAnts = {}
	notUsefull = False
	sent = nltk.sent_tokenize(text)
	t = nltk.word_tokenize(sent[0])
	pos = nltk.pos_tag(t)
	#print(pos)
	for item in pos:

		word = item[0]
		wordP = item[1]

		if wordP.startswith('J'):
			p = wn.ADJ
		elif wordP.startswith('V'):
			p = wn.VERB
		elif wordP.startswith('N'):
			p = wn.NOUN
		elif wordP.startswith('R'):
			p = wn.ADV
		else:
			'''
			Using this flag helps us make our response more uniform
			'''
			# experimental
			notUsefull = True
			#print(word, 'is ', wordP, 'and as such, of no interest to us.')
			#continue

		if notUsefull:
			for syn in wn.synsets(word):
				for l in syn.lemmas():
					if l.antonyms():
						antonyms.append(l.antonyms()[0].name())
		else:	
			for syn in wn.synsets(word, p):
				for l in syn.lemmas():
					if l.antonyms():
						antonyms.append(l.antonyms()[0].name())

		antonyms = list(set(antonyms))
		#if antonyms != []:
		#	print(word, ' has antonyms: ', set(antonyms))
		#print('---------------------')
		queryAnts[word] = antonyms
		antonyms = []
	#print(queryAnts)
	return queryAnts

