
function search(left) {
    let queryElement = left ? $('#leftQuery')[0] : $('#rightQuery')[0];

    //  The number of terms is equal to the number of childnodes of the query
    //  minus 2 for the button and the result div
    let numOfTerms = queryElement['childNodes'].length - 2;
    
    let query = '';
    
    for (let i = 0; i < numOfTerms; i++) {
        query = query.concat(queryElement['childNodes'][i].value);
        if(i !== numOfTerms - 1) {
            query = query.concat(' ');
        }
    }
    
    searchDocuments(query, $('#resPerQuery').val(), $('#id').val(), queryElement['childNodes'][numOfTerms + 1].id);
}

function exploitQuery() {
    var http = new XMLHttpRequest();
    var url = "antonymsServlet";

    http.open("POST", url, true);
    
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {
        if(http.readyState === 4 && http.status === 200) {
            let responseJSON = http.responseText.replace(/,]/g, "]");
            let exploitedQuery = JSON.parse(responseJSON);
    
            let divL = '<div id="leftQuery">';
            let divR = '<div id="rightQuery">';
            for(let i in exploitedQuery.exploited) {
                let select = '<select>';
                for(let j in exploitedQuery.exploited[i]) {
                    select += '<option>' + exploitedQuery.exploited[i][j] + '</option>';
                }
                select += '</select>';
                divL += select;
                divR += select;
            }
            divL += '<button type="submit" onclick="javascript:search(true)">Search</button>';
            divL += '<div id="resultsL"></div>';
            divR += '<button type="submit" onclick="javascript:search(false)">Search</button>';
            divR += '<div id="resultsR"></div>';
            $('#searchL').html(divL);
            $('#searchR').html(divR);
            
        }
    };

    http.send('query=' + $('#query').val());
}

function checkReadyExperiments() {
    var http = new XMLHttpRequest();
    var url = "checkExperimentsServlet";
    
    http.open("POST", url, true);
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {
        if(http.readyState === 4 && http.status === 200) {
            let readyExpsArr = http.responseText
                .replace(/\[/g, "").replace(/\]/g, "")
                .split(",").map(x => x.trim());
            let options = '';
            readyExpsArr.forEach((exp) => {
               options += '<option value="'+ exp +'">' + exp + '</option>';
            });
            $('#id').html(options);
            return;
        }
    };

    http.send();
}

/*
 * 
 * @param {String} searchQuery Query to lucene
 * @returns {nothing}
 */
function crawlAndIndex() {
    var http = new XMLHttpRequest();
    var url = "crawlAndIndexServlet";
    
    var data = {
        "id": $('#id').val(),
        "resPerQuery": $('#resPerQuery').val(),
        "queries": $('#queries').val().split(',').map(x => x.trim())
    };
    
    http.open("POST", url, true);
    
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {//Call a function when the state changes.
        if(http.readyState === 4 && http.status === 200) {
            console.log('You are probably not gonna see this, but your crawling ' +
                'and indexing is done.');
            return;
        }
    };

    http.send('parameters=' + JSON.stringify(data));
    
    alert('Your crawl and indexing has started, you will know it\'s done when the ' +
        'experiment id shows up in querying');
    
}

/*
 * 
 * @param {String} searchQuery Query to lucene
 * @returns {nothing}
 */
function searchDocuments(searchQuery, numOfRes, id, containerId) {
    var query = searchQuery;
    
    $('#' + containerId).html('');
    
    var http = new XMLHttpRequest();
    var url = "searchServlet";
    var params = "query=" + query + "&numOfRes=" + numOfRes + '&id=' + id;
    http.open("POST", url, true);
    
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {//Call a function when the state changes.
        if(http.readyState === 4 && http.status === 200) {
            let resObjArr = JSON.parse(http.responseText);
            resObjArr.forEach(function(res) {
                let rank = res.name.match(/\d+/)[0];
                let namesAndRanks = '';
                
                let first = true;
                res.queries.forEach(function(q) {
                    let rank = q.rank;
                    namesAndRanks += q.query.replace(/\+/gm, ' ')
                        .replace(rank, '')
                        .toLowerCase() + 
                        ' - Google Rank: ' + rank;
                    if (first) {
                        namesAndRanks += ' - Score: ' + res.score;
                        first = false;
                    }
                    namesAndRanks += '<br />';
                });
                $('#' + containerId).append('<div>' + '<a target="_blank" href="' + 
                    res.href + '">' + res.href + '</a>' + '<br />' + namesAndRanks + 
                    '</div> <br />');
            });
            checkForDoubles();
        }
    };
    
    http.send(params);
}

// Checks if there are same results on both searches, and highlights them
function checkForDoubles() {
    resetHighlights();
    var posChildren = document.getElementById("resultsL").childNodes;
    var negChildren = document.getElementById("resultsR").childNodes;
    var numOfResP = posChildren.length;
    var numOfResN = negChildren.length;
    for(var i = 0; i < numOfResP ; i++) {
        if(posChildren[i].tagName !== 'DIV') continue;
        for(var j = 0; j < numOfResN ; j++) {
            if(negChildren[j].tagName !== 'DIV') continue;
            // Get href
            var href1 = document.createElement('div');
            href1 = posChildren[i].getElementsByTagName('a')[0].href;
            var href2 = document.createElement('div');
            href2 = negChildren[j].getElementsByTagName('a')[0].href;
            
            if(href1 === href2) {
                posChildren[i].className = "same";
                negChildren[j].className = "same";
            }
        }
    }
}

// Resets highlights
function resetHighlights() {
    var posChildren = document.getElementById("resultsL").childNodes;
    var numOfRes = posChildren.length;
    for(var i = 1; i < numOfRes; i++) {
        posChildren[i].className = "unstyled";
    }
    
    var negChildren = document.getElementById("resultsR").childNodes;
    var numOfRes = negChildren.length;
    for(var i = 1; i < numOfRes; i++) {
        negChildren[i].className = "unstyled";
    }
}
