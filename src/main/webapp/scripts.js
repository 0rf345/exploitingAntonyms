var queryOptions;
var queryOptionsR;

function getQueriesUsed() {
    let experimentID = $('#id').val();
    var http = new XMLHttpRequest();
    var url = "getQueriesServlet";

    http.open("POST", url, true);
    
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {
        if(http.readyState === 4 && http.status === 200) {
            let allQueries = http.responseText.replace(/\[/g, "").replace(/\]/g, "")
                .split(',').map(x => x.trim());
            let options = ''; 
            for (let i in allQueries) {
                options = options + '<option>' + allQueries[i] + '</option>';
            }
            queryOptions = options;
        }
    };

    http.send('experimentID=' + experimentID);
}

function search(left) {
    //  Choose correct queryElement
    let queryElement = left ? $('#leftQuery')[0] : $('#rightQuery')[0];
    //  Which id should be passed on
    let id = left ? 'resultsL' : 'resultsR';
    
    //  Choose correct query for search
    let query = left ? $('.custom-combobox')[0].childNodes[0].value : $('.custom-combobox')[1].childNodes[0].value;

    searchDocuments(query, $('#resPerQuery').val(), $('#id').val(), id);
}

function exploitQuery() {
    
    let selectL = '<div id="leftQuery" class="ui-widget"><select id="combobox">' + queryOptions + '</select>';
    //  Load combobox on DOM
    $('#searchL').html(selectL);
    
    let searchL = '<button type="submit" onclick="javascript:search(true)">Search</button>' +
        '<div id="resultsL"></div></div>';

    //  Add search button and results div
    $('#searchL').append(searchL);
    //  Enable combobox
    $('#combobox').combobox();
    //  Clear the left combobox (should be updated if the #inputs changes
    $('input')[3].value = '';
}

function checkReadyExperiments() {
    var http = new XMLHttpRequest();
    var url = "checkExperimentsServlet";
    
    http.open("POST", url, true);
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {
        if(http.readyState === 4 && http.status === 200) {
            let readyExpsArr = http.responseText
                .replace(/\[/g, "").replace(/\]/g, "")
                .split(",").map(x => x.trim());
            let options = '';
            readyExpsArr.forEach((exp) => {
               options += '<option value="'+ exp +'">' + exp + '</option>';
            });
            $('#id').html(options);
            getQueriesUsed();
            return;
        }
    };

    http.send();
}

/*
 * 
 * @param {String} searchQuery Query to lucene
 * @returns {nothing}
 */
function crawlAndIndex() {
    var http = new XMLHttpRequest();
    var url = "crawlAndIndexServlet";
    
    var data = {
        "id": $('#id').val(),
        "resPerQuery": $('#resPerQuery').val(),
        "queries": $('#queries').val().split(',').map(x => x.trim())
    };
    
    http.open("POST", url, true);
    
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {//Call a function when the state changes.
        if(http.readyState === 4 && http.status === 200) {
            console.log('You are probably not gonna see this, but your crawling ' +
                'and indexing is done.');
            return;
        }
    };

    http.send('parameters=' + JSON.stringify(data));
    
    alert('Your crawl and indexing has started, you will know it\'s done when the ' +
        'experiment id shows up in querying');
    
}

/*
 * 
 * @param {String} searchQuery Query to lucene
 * @returns {nothing}
 */
function searchDocuments(searchQuery, numOfRes, id, containerId) {
    var query = searchQuery;
    var similarity = $('#Similarity').val();
    let experimentID = $('#id').val();
    
    $('#' + containerId).html('');
    
    var http = new XMLHttpRequest();
    var url = "searchServlet";
    var params = "query=" + query + "&numOfRes=" + numOfRes + '&id=' + id + 
        '&similarity=' + similarity + '&experimentID=' + experimentID;
    http.open("POST", url, true);
    
    http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    
    http.onreadystatechange = function() {//Call a function when the state changes.
        if(http.readyState === 4 && http.status === 200) {
            let resObjArr = JSON.parse(http.responseText);
            if (resObjArr.length === 0) {
                $('#' + containerId).append('NO RESULTS FOUND');
            }
            let counter = 1;
            resObjArr.forEach(function(res) {
                let rank = res.name.match(/\d+/)[0];
                let namesAndRanks = '';
                
                let first = true;
                res.queries.sort(function(a, b) {
                    return a.rank > b.rank;
                }).forEach(function(q) {
                    let rank = q.rank;
                    if (first) {
                        namesAndRanks += 'Score: ' + res.score + '<br />';
                        first = false;
                    }
                    let ggQuery = q.query.replace(/\+/gm, ' ')
                        .replace(rank, '')
                        .toLowerCase();
                    
                    if (ggQuery.toLowerCase() === query.toLowerCase()) {
                        namesAndRanks += '<b>';
                    }
                        
                    namesAndRanks += ggQuery + ' - #gg: ' + rank;
                    
                    if (ggQuery.toLowerCase() === query.toLowerCase()) {
                        namesAndRanks += '</b>';
                    }
                    
                    namesAndRanks += '<br />';
                });
                $('#' + containerId).append('<div>' + counter + ' ' + '<a target="_blank" href="' + 
                    res.href + '">' + res.href + '</a>' + '<br />' + namesAndRanks + 
                    '</div> <br />');
                counter = counter + 1;
            });
                       
            if (containerId === 'resultsL') {
                var httpNew = new XMLHttpRequest();
                var urlNew = "antonymsServlet";
                var paramsNew = "query=" + query;
                httpNew.open("POST", urlNew, true);

                httpNew.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

                http.onreadystatechange = function() {//Call a function when the state changes.
                    if (http.readyState === 4 && http.status === 200) {
                        console.log(http.responseText);
                    }
                };
                httpNew.send(paramsNew);
                
                //  TODO: use servlet for queryOptions
                queryOptionsR = '<option>Cats</option><option>Dogs</option>';
                
                let selectR = '<div id="rightQuery" class="ui-widget"><select id="comboboxR">' + queryOptionsR + '</select>';
                $('#searchR').html(selectR);

                let searchR = '<button type="submit" onclick="javascript:search(false)">Search</button>' +
                    '<div id="resultsR"></div></div>';


                $('#searchR').append(searchR);
                $('#comboboxR').combobox();
                //  Clear the right searchbox (should be updated if the #inputs changes
                $('input')[4].value = '';
            }
            
            checkForDoubles();
        }
    };
    
    http.send(params);
}

// Checks if there are same results on both searches, and highlights them
function checkForDoubles() {
    resetHighlights();
    var posChildren = document.getElementById("resultsL").childNodes;
    var negChildren = document.getElementById("resultsR").childNodes;
    var numOfResP = posChildren.length;
    var numOfResN = negChildren.length;
    let leftCount = 0;
    let rightCount = 0;
    for(var i = 0; i < numOfResP ; i++) {
        if(posChildren[i].tagName !== 'DIV') continue;
        leftCount++;
        for(var j = 0; j < numOfResN ; j++) {
            if(negChildren[j].tagName !== 'DIV') continue;
            rightCount++;
            //  Get href
            var href1 = document.createElement('div');
            href1 = posChildren[i].getElementsByTagName('a')[0].href;
            var href2 = document.createElement('div');
            href2 = negChildren[j].getElementsByTagName('a')[0].href;
            
            //  if they have the same href
            if(href1 === href2) {
                posChildren[i].className = "same";
                negChildren[j].className = "same";
                posChildren[i].innerHTML += 'Match #' + rightCount + '<br />';
                negChildren[j].innerHTML += 'Match #' + leftCount + '<br />';
            }
        }
        rightCount = 0;
    }
}

// Resets highlights
function resetHighlights() {
    var posChildren = document.getElementById("resultsL").childNodes;
    var numOfRes = posChildren.length;
    for(var i = 1; i < numOfRes; i++) {
        posChildren[i].className = "unstyled";
    }
    
    var negChildren = document.getElementById("resultsR").childNodes;
    var numOfRes = negChildren.length;
    for(var i = 1; i < numOfRes; i++) {
        negChildren[i].className = "unstyled";
    }
}
